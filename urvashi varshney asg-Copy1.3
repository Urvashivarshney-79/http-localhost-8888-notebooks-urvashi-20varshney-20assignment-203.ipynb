{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### program to subtract two complex numbers in python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-4-3j)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=2+5j\n",
    "b=6+8j\n",
    "c=a-b\n",
    "c"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Find the fourth root of a number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=(256**(1/4))\n",
    "a"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Swap two numbers in python with help of temporary variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x= 3\n",
      "y= 5\n"
     ]
    }
   ],
   "source": [
    "x=5\n",
    "y=3\n",
    "x,y=y,x\n",
    "print(\"x=\",x)\n",
    "print(\"y=\",y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Swap two numbers in python without using temporary var."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter first num8\n",
      "enter first num7\n",
      "value of num1 before swapping 8\n",
      "value of num1 before swapping 7\n",
      "value of num1 after swapping 7\n",
      "value of num1 after swapping 8\n"
     ]
    }
   ],
   "source": [
    "num1 =input('enter first num')\n",
    "num2 =input('enter first num')\n",
    "print(\"value of num1 before swapping\",num1)\n",
    "print(\"value of num1 before swapping\",num2)\n",
    "num1,num2=num2,num1\n",
    "print(\"value of num1 after swapping\",num1)\n",
    "print(\"value of num1 after swapping\",num2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Convert fahrenheit to kelvin and celsius."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter temperature in fahrenheit:50\n",
      "temperature in celsius: 10.0\n"
     ]
    }
   ],
   "source": [
    " temperature = float(input(\"enter temperature in fahrenheit:\"))\n",
    " celsius =((temperature-32)*5/9)\n",
    "print(\"temperature in celsius:\",celsius)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter temperature in fahrenheit:50\n",
      "temperature in kelvin: 283.5\n"
     ]
    }
   ],
   "source": [
    " temperature = float(input(\"enter temperature in fahrenheit:\"))\n",
    " kelvin =((temperature-32)*5/9+273.5)\n",
    "print(\"temperature in kelvin:\",kelvin)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Demonstrate all the data type of python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "type of a: <class 'int'>\n"
     ]
    }
   ],
   "source": [
    "a=5\n",
    "print(\"type of a:\",type(a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "type of b: <class 'float'>\n"
     ]
    }
   ],
   "source": [
    "b=6.6\n",
    "print(\"type of b:\",type(b))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "type of c: <class 'complex'>\n"
     ]
    }
   ],
   "source": [
    "c=6+6j\n",
    "print(\"type of c:\",type(c))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
